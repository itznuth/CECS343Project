from investor import Investor
from manager import Manager
from person import Person
from customer import Customer
from facilitymaintenance import FacilityMaintenance
from financialreporting import FinancialReporting
from security import Security
from securitymanagement import SecurityManagement
from store import Store
from rentalpayment import RentalPayment
from tenant import Tenant
from visitortracking import VisitorTracking
from datamanager import DataManager

class MallManagementSystem:
    def __init__(self):
        self.stores = []
        self.investors = []
        self.customers = []
        self.managers = []
        self.maintenance_requests = []
        self.security_logs = []
        self.tenants = []
        self.rental_payments = []
        self.visitor_tracking = VisitorTracking()

    def add_store(self):
        print("\nAdd New Store")
        number = int(input("Enter store number: "))
        floor = int(input("Enter floor number: "))
        rent = float(input("Enter monthly rent amount: "))
        self.stores.append(Store(number, floor, rent))
        print(f"Store {number} added successfully!")

    def add_investor(self):
        print("\nAdd New Investor")
        name = input("Enter investor name: ")
        contact = input("Enter contact information: ")
        self.investors.append(Investor(name, contact))
        print(f"Investor {name} added successfully!")

    def add_customer(self):
        print("\nAdd New Customer")
        name = input("Enter customer name: ")
        self.customers.append(Customer(name))
        print(f"Customer {name} added successfully!")

    def add_manager(self):
        print("\nAdd New Manager")
        name = input("Enter manager name: ")
        emp_id = int(input("Enter employee ID: "))
        contact = input("Enter contact information: ")
        self.managers.append(Manager(name, emp_id, contact))
        print(f"Manager {name} added successfully!")

    def create_maintenance_request(self):
        print("\nCreate Maintenance Request")
        req_id = int(input("Enter request ID: "))
        tenant_id = int(input("Enter tenant ID: "))
        maint_type = input("Enter maintenance type: ")
        date = input("Enter request date (YYYY-MM-DD): ")
        self.maintenance_requests.append(
            FacilityMaintenance(req_id, tenant_id, maint_type, date)
        )
        print(f"Maintenance request {req_id} created successfully!")

    def log_security_incident(self):
        print("\nLog Security Incident")
        location = input("Enter incident location: ")
        details = input("Enter incident details: ")
        security = SecurityManagement(location)
        security.log_incident(details)
        self.security_logs.append(security)
        print("Incident logged successfully!")

    def generate_financial_report(self):
        print("\nGenerate Financial Report")
        revenue = float(input("Enter total revenue: "))
        sales = float(input("Enter total sales: "))
        date = input("Enter report date (YYYY-MM-DD): ")
        report = FinancialReporting(revenue, sales, date)
        print(f"\nFinancial Report for {date}")
        print(f"Total Revenue: ${report.get_revenue():,.2f}")
        print(f"Total Sales: ${report.get_sales():,.2f}")
        
    def add_tenant(self):
        print("\nAdd New Tenant")
        name = input("Enter tenant name: ")
        space_num = int(input("Enter store number: "))
        start_date = input("Enter lease start date (YYYY-MM-DD): ")
        end_date = input("Enter lease end date (YYYY-MM-DD): ")
        contact = input("Enter contact information: ")
        self.tenants.append(Tenant(name, space_num, start_date, end_date, contact))
        print(f"Tenant {name} added successfully!")

    def record_rental_payment(self):
        print("\nRecord Rental Payment")
        amount = float(input("Enter payment amount: "))
        date = input("Enter payment date (YYYY-MM-DD): ")
        unit = int(input("Enter rental unit number: "))
        status = input("Enter payment status (completed/pending/overdue): ")
        self.rental_payments.append(RentalPayment(amount, date, unit, status))
        print(f"Payment of ${amount:,.2f} for unit {unit} recorded successfully!")

    def track_visitor(self):
        print("\nVisitor Tracking")
        action = input("(I)ncrement or (D)ecrement visitor count? ").upper()
        if action == "I":
            time = input("Enter entry time (HH:MM): ")
            self.visitor_tracking.increment_visitor_count(time)
            print("Visitor count incremented.")
        elif action == "D":
            self.visitor_tracking.decrement_visitor_count()
            print("Visitor count decremented.")
        else:
            print("Invalid choice.")
        print(f"Current visitor count: {self.visitor_tracking.get_total_visitors()}")
